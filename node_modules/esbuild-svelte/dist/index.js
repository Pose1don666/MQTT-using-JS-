const { preprocess, compile } = require('svelte/compiler');
const { relative } = require('path');
const { promisify } = require('util');
const { readFile, statSync } = require('fs');
const convertMessage = ({message, start, end, filename, frame}) => ({
  text: message,
  location: start && end && {
    file: filename,
    line: start.line,
    column: start.column,
    length: start.line === end.line ? end.column - start.column : 0,
    lineText: frame
  }
});
function sveltePlugin(options) {
  if (options == null ? void 0 : options.preprocessor) {
    options.preprocess = options.preprocessor;
  }
  return {
    name: "esbuild-svelte",
    setup(build) {
      const cssCode = new Map();
      const fileCache = new Map();
      build.onLoad({filter: /\.svelte$/}, async (args) => {
        if ((options == null ? void 0 : options.cache) === true && fileCache.has(args.path)) {
          const cachedFile = fileCache.get(args.path);
          if (cachedFile && statSync(args.path).mtime < cachedFile.time) {
            return cachedFile.data;
          }
        }
        let source = await promisify(readFile)(args.path, "utf8");
        let filename = relative(process.cwd(), args.path);
        try {
          if (options == null ? void 0 : options.preprocess) {
            source = (await preprocess(source, options.preprocess, {filename})).code;
          }
          let compileOptions = {css: false, ...options == null ? void 0 : options.compileOptions};
          let {js, css, warnings} = compile(source, {...compileOptions, filename});
          let contents = js.code + `
//# sourceMappingURL=` + js.map.toUrl();
          if (!compileOptions.css && css.code) {
            let cssPath = args.path.replace(".svelte", ".esbuild-svelte-fake-css").replace(/\\/g, "/");
            cssCode.set(cssPath, css.code + `/*# sourceMappingURL=${css.map.toUrl()}*/`);
            contents = contents + `
require('${cssPath}');`;
          }
          if (options == null ? void 0 : options.preprocessor) {
            warnings.push({message: "The 'preprocessor' option for esbuild-svelte is deprecated, please use 'preprocess' instead", code: ""});
          }
          const result = {contents, warnings: warnings.map(convertMessage)};
          if ((options == null ? void 0 : options.cache) === true) {
            fileCache.set(args.path, {data: result, time: new Date()});
          }
          return result;
        } catch (e) {
          return {errors: [convertMessage(e)]};
        }
      });
      build.onResolve({filter: /\.esbuild-svelte-fake-css$/}, ({path}) => {
        return {path, namespace: "fakecss"};
      });
      build.onLoad({filter: /\.esbuild-svelte-fake-css$/, namespace: "fakecss"}, ({path}) => {
        const css = cssCode.get(path);
        return css ? {contents: css, loader: "css"} : null;
      });
    }
  };
}
module.exports = sveltePlugin;
